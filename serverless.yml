
service: serverless-perhap

provider:
  name: aws
  runtime: python2.7
  stage: dev
  region: us-west-2
  environment:
    PerhapEvents: Perhap-Events
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.PerhapEvents}"


# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get
  new-event:
    handler: handler.new_event
    events:
      - http:
          method: post
          path: events/{realm}/{domain}/{entity}/{event-type}


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    DynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "Realm"
            AttributeType: "S"
          # -
          #   AttributeName: "Domain"
          #   AttributeType: "S"
          # -
          #   AttributeName: "Entity"
          #   AttributeType: "S"
          # -
          #   AttributeName: "EventType"
          #   AttributeType: "S"
          # -
          #   AttributeName: "EventId"
          #   AttributeType: "S"
          -
            AttributeName: "RangeId"
            AttributeType: "S"
          # -
          #   AttributeName: "EventData"
          #   AttributeType: "M"
        KeySchema:
          -
            AttributeName: "Realm"
            KeyType: "HASH"
          -
            AttributeName: "RangeId"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: "10"
          WriteCapacityUnits: "50"
        TableName: ${self:provider.environment.PerhapEvents}

#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
